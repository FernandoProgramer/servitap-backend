// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//////////////////////////
// Modelos de la base de datos
//////////////////////////

// Modelo de restaurantes
model Restaurants {
  id         Int          @id @default(autoincrement())
  name       String
  nit        String
  Users      Users[]
  Dishes     Dishes[]
  Categories Categories[]
  Tables     Tables[]
}

// Modelo de roles (ej: administrador, mesero, etc.)
model Roles {
  id    Int     @id @default(autoincrement())
  role  String  @unique
  Users Users[] // Relación con los usuarios que tienen este rol
}

// Modelo de usuarios (empleados del restaurante)
model Users {
  id            Int         @id @default(autoincrement())
  name          String
  lastname      String
  email         String      @unique
  password      String
  Restaurant    Restaurants @relation(fields: [id_restaurant], references: [id])
  id_restaurant Int
  Role          Roles       @relation(fields: [id_role], references: [id])
  id_role       Int
  Orders        Orders[] // Relación con las órdenes tomadas por este usuario
}

// Modelo de categorías (ej: entradas, bebidas, postres)
model Categories {
  id            Int         @id @default(autoincrement())
  name          String
  restaurant    Restaurants @relation(fields: [id_restaurant], references: [id])
  id_restaurant Int
}

// Modelo de platos del menú
model Dishes {
  id            Int            @id @default(autoincrement())
  name          String
  price         Int
  url_img       String
  restaurant    Restaurants    @relation(fields: [id_restaurant], references: [id])
  id_restaurant Int
  Order_dishes  Order_dishes[] // Relación con las órdenes que incluyen este plato
}

// Modelo de mesas del restaurante
model Tables {
  id            Int         @id @default(autoincrement())
  name          String
  status        String // Estado actual (libre, ocupada, reservada, etc.)
  restaurant    Restaurants @relation(fields: [id_restaurant], references: [id])
  id_restaurant Int
}

// Modelo de órdenes tomadas por los meseros
model Orders {
  id           Int            @id @default(autoincrement())
  Waiter       Users          @relation(fields: [id_user], references: [id])
  id_user      Int
  Order_dishes Order_dishes[] // Relación con los platos dentro de esta orden
  Bills        Bills[] // Relación con la factura asociada a esta orden
}

// Modelo intermedio que conecta órdenes con platos específicos
model Order_dishes {
  id       Int     @id @default(autoincrement())
  Order    Orders  @relation(fields: [id_order], references: [id])
  id_order Int
  Dish     Dishes  @relation(fields: [id_dish], references: [id])
  id_dish  Int
  quantity Int
  note     String?
}

// Modelo de facturación (facturas generadas por cada orden)
model Bills {
  id           Int    @id @default(autoincrement())
  Order        Orders @relation(fields: [id_order], references: [id])
  id_order     Int
  total_amount Int
  status       String // Estado (pagado, pendiente, anulado, etc.)
}
